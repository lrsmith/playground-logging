input {
  file {
    path => "/logs/elb"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
#  ruby { code => "event.set('time', event.get('@timestamp').to_f)" }
  mutate {
    add_field => { "index" => "alb_1" }
  }
  mutate {
    add_field => { "sourcetype" => "manual" }
  }
  mutate {
    rename => { "message" => "event" }
  }
  mutate {
    remove_field => ["path","@version","@timestamp"]
  }
}

#filter {
#  grok {
#  match => ["event","%{NOTSPACE:type} %{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} (?:%{IP:backend_ip}:%{NUMBER:backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{NUMBER:elb_status_code:int}|-) (?:%{NUMBER:backend_status_code:int}|-) %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} \"(?:%{WORD:verb}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:httpversion}|-( )?)%{SPACE}\" \"%{DATA:userAgent|-}\"( %{NOTSPACE:ssl_cipher|-} %{NOTSPACE:ssl_protocol}|-) (%{NOTSPACE:target_group_arn})? (\"%{NOTSPACE:trace_id}\")? (\"%{NOTSPACE:RequestDomain}\")? (?:\"%{NOTSPACE:chosen_cert_arn}\"|-)? (?:%{NUMBER:matched_rule_priority:int}|-) (%{TIMESTAMP_ISO8601:request_creation_time})? (?:\"%{NOTSPACE:action_executed}\"|-)? (?:\"%{GREEDYDATA:redirect_url}\"|-)? (?:\"%{GREEDYDATA:error_reason}\"|-)?"]
#    remove_field => ["@version","@timestamp"]
#  }
#}

output {
  stdout {
    codec => rubydebug
  }
  http {
    format => "json"
    content_type => "application/json"
    http_method => "post"
    url => "http://splunk:8088/services/collector"
    headers => ['Authorization', 'Splunk 7da8974a-d93d-4caa-b755-8757acb530e9']
  }
}
